name: ci
on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:

  # Build linux runtime for running tests
  build_runtime:
    name: Build Runtime
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
  
    - uses: FranzDiebold/github-env-vars-action@v1.2.1

    - name: Configure toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        target:  x86_64-unknown-linux-gnu
        override: true
        components: rustfmt, clippy

    - name: Setup caching
      uses: actions/cache@v2
      with:
        key: rt-${{ matrix.os }}-${{ matrix.target }}
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/${{ matrix.target }}

    - name: Install libclang for bindgen
      if: ${{ matrix.os == 'ubuntu-latest'}}
      run: |
        sudo apt install libclang-dev
  
    - name: Cargo build
      uses: actions-rs/cargo@v1
      with:
        use-cross: ${{ matrix.use_cross }}
        command: build
        args: --package wasm-embedded-rt

    - name: Upload runtime artifact
      uses: actions/upload-artifact@v2
      with:
        name: rt
        path: target/debug/wasm-embedded-rt

  # Build Rust HAL tests
  build_hal_rs:
    name: Build Rust HAL tests
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
  
    - uses: FranzDiebold/github-env-vars-action@v1.2.1

    - name: Configure toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        target:  wasm32-wasi
        override: true
        components: rustfmt, clippy

    - name: Setup caching
      uses: actions/cache@v2
      with:
        key: rt-${{ matrix.os }}-${{ matrix.target }}
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/${{ matrix.target }}

    - name: Install libclang for bindgen
      if: ${{ matrix.os == 'ubuntu-latest'}}
      run: |
        sudo apt install libclang-dev
  
    - name: Cargo build
      uses: actions-rs/cargo@v1
      with:
        use-cross: ${{ matrix.use_cross }}
        command: build
        args: --package wasm-embedded-hal --features=tests

    - name: Upload test artifacts
      uses: actions/upload-artifact@v2
      with:
        name: tests-rs
        path: target/wasm32-wasi/debug/test-*.wasm

  # Build AssemblyScript HAL tests
  build_hal_as:
    name: Build AssemblyScript HAL tests
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
  
    - uses: FranzDiebold/github-env-vars-action@v1.2.1

    - name: Configure toolchain
      uses: actions/setup-node@v2
      with:
        node-version: '19'
        cache-dependency-path: hal_as/package-lock.json

    - name: Setup dependencies
      run: cd hal_as && npm install
  
    - name: Asc build
      run: cd hal_as && make tests

    - name: Upload test artifacts
      uses: actions/upload-artifact@v2
      with:
        name: tests-as
        path: hal_as/build/test-*.wasm

  # Run tests from prior steps
  run_tests:
    name: Run HAL tests
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [ build_runtime, build_hal_rs, build_hal_as ]

    strategy:
      fail-fast: false
      matrix:
        runtime: [ wasm3, wasmtime ]
        test: [ gpio, i2c, spi ]
        hal: [ rs, as ]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
  
    - uses: FranzDiebold/github-env-vars-action@v1.2.1

    - name: Download runtime artifact
      uses: actions/download-artifact@v3
      with:
        name: rt
        path: bins/

    - name: Download test artifacts
      uses: actions/download-artifact@v3
      with:
        name: tests-${{ matrix.hal }}
        path: bins/
    
    - name: Fix execute permissions
      run: chmod +x bins/wasm-embedded-rt

    - name: Run test
      run: >
        ./bins/wasm-embedded-rt
        --engine=mock
        --runtime=${{ matrix.runtime }}
        --config=spec/tests/${{ matrix.test }}.toml
        ./bins/test-${{ matrix.test }}.wasm
